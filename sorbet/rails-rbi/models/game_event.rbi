# This is an autogenerated file for dynamic methods in GameEvent
# Please rerun bundle exec rake rails_rbi:models[GameEvent] to regenerate.

# typed: strong
module GameEvent::ActiveRelation_WhereNot
  sig { params(opts: T.untyped, rest: T.untyped).returns(T.self_type) }
  def not(opts, *rest); end
end

module GameEvent::GeneratedAttributeMethods
  sig { returns(T.nilable(Integer)) }
  def ball_pos_x; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def ball_pos_x=(value); end

  sig { returns(T::Boolean) }
  def ball_pos_x?; end

  sig { returns(T.nilable(Integer)) }
  def ball_pos_y; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def ball_pos_y=(value); end

  sig { returns(T::Boolean) }
  def ball_pos_y?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def created_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def created_at=(value); end

  sig { returns(T::Boolean) }
  def created_at?; end

  sig { returns(T.nilable(Integer)) }
  def game_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def game_id=(value); end

  sig { returns(T::Boolean) }
  def game_id?; end

  sig { returns(Integer) }
  def id; end

  sig { params(value: T.any(Numeric, ActiveSupport::Duration)).void }
  def id=(value); end

  sig { returns(T::Boolean) }
  def id?; end

  sig { returns(T.nilable(String)) }
  def kind; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def kind=(value); end

  sig { returns(T::Boolean) }
  def kind?; end

  sig { returns(T.nilable(String)) }
  def message; end

  sig { params(value: T.nilable(T.any(String, Symbol))).void }
  def message=(value); end

  sig { returns(T::Boolean) }
  def message?; end

  sig { returns(T.nilable(Integer)) }
  def player_id; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def player_id=(value); end

  sig { returns(T::Boolean) }
  def player_id?; end

  sig { returns(T.nilable(Integer)) }
  def side; end

  sig { params(value: T.nilable(T.any(Numeric, ActiveSupport::Duration))).void }
  def side=(value); end

  sig { returns(T::Boolean) }
  def side?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def time; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def time=(value); end

  sig { returns(T::Boolean) }
  def time?; end

  sig { returns(ActiveSupport::TimeWithZone) }
  def updated_at; end

  sig { params(value: T.any(Date, Time, ActiveSupport::TimeWithZone)).void }
  def updated_at=(value); end

  sig { returns(T::Boolean) }
  def updated_at?; end
end

module GameEvent::GeneratedAssociationMethods
  sig { returns(T.nilable(::Game)) }
  def game; end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
  def build_game(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
  def create_game(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.params(object: ::Game).void)).returns(::Game) }
  def create_game!(*args, &block); end

  sig { params(value: T.nilable(::Game)).void }
  def game=(value); end
end

module GameEvent::CustomFinderMethods
  sig { params(limit: Integer).returns(T::Array[GameEvent]) }
  def first_n(limit); end

  sig { params(limit: Integer).returns(T::Array[GameEvent]) }
  def last_n(limit); end

  sig { params(args: T::Array[T.any(Integer, String)]).returns(T::Array[GameEvent]) }
  def find_n(*args); end

  sig { params(id: Integer).returns(T.nilable(GameEvent)) }
  def find_by_id(id); end

  sig { params(id: Integer).returns(GameEvent) }
  def find_by_id!(id); end
end

class GameEvent < ApplicationRecord
  include GameEvent::GeneratedAttributeMethods
  include GameEvent::GeneratedAssociationMethods
  extend GameEvent::CustomFinderMethods
  extend GameEvent::QueryMethodsReturningRelation
  RelationType = T.type_alias { T.any(GameEvent::ActiveRecord_Relation, GameEvent::ActiveRecord_Associations_CollectionProxy, GameEvent::ActiveRecord_AssociationRelation) }
end

module GameEvent::QueryMethodsReturningRelation
  sig { returns(GameEvent::ActiveRecord_Relation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(GameEvent::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_Relation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GameEvent::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: GameEvent::ActiveRecord_Relation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

module GameEvent::QueryMethodsReturningAssociationRelation
  sig { returns(GameEvent::ActiveRecord_AssociationRelation) }
  def all; end

  sig { params(block: T.nilable(T.proc.void)).returns(GameEvent::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def select(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def order(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def reorder(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def group(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def limit(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def offset(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def joins(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def left_joins(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def left_outer_joins(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def where(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def rewhere(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def preload(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def eager_load(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def includes(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def from(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def lock(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def readonly(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def or(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def having(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def create_with(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def distinct(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def references(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def none(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def unscope(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def merge(*args); end

  sig { params(args: T.untyped).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def except(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(GameEvent::ActiveRecord_AssociationRelation) }
  def extending(*args, &block); end

  sig do
    params(
      of: T.nilable(Integer),
      start: T.nilable(Integer),
      finish: T.nilable(Integer),
      load: T.nilable(T::Boolean),
      error_on_ignore: T.nilable(T::Boolean),
      block: T.nilable(T.proc.params(e: GameEvent::ActiveRecord_AssociationRelation).void)
    ).returns(ActiveRecord::Batches::BatchEnumerator)
  end
  def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, &block); end
end

class GameEvent::ActiveRecord_Relation < ActiveRecord::Relation
  include GameEvent::ActiveRelation_WhereNot
  include GameEvent::CustomFinderMethods
  include GameEvent::QueryMethodsReturningRelation
  Elem = type_member(fixed: GameEvent)
end

class GameEvent::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  include GameEvent::ActiveRelation_WhereNot
  include GameEvent::CustomFinderMethods
  include GameEvent::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: GameEvent)
end

class GameEvent::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include GameEvent::CustomFinderMethods
  include GameEvent::QueryMethodsReturningAssociationRelation
  Elem = type_member(fixed: GameEvent)

  sig { params(records: T.any(GameEvent, T::Array[GameEvent])).returns(T.self_type) }
  def <<(*records); end

  sig { params(records: T.any(GameEvent, T::Array[GameEvent])).returns(T.self_type) }
  def append(*records); end

  sig { params(records: T.any(GameEvent, T::Array[GameEvent])).returns(T.self_type) }
  def push(*records); end

  sig { params(records: T.any(GameEvent, T::Array[GameEvent])).returns(T.self_type) }
  def concat(*records); end
end
