# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/fcm/all/fcm.rbi
#
# fcm-0.0.6

class FCM
  def add(key_name, project_id, notification_key, registration_ids); end
  def add_registration_ids(key_name, project_id, notification_key, registration_ids); end
  def api_key; end
  def api_key=(arg0); end
  def batch_topic_subscription(topic, registration_ids); end
  def batch_topic_unsubscription(topic, registration_ids); end
  def build_canonical_ids(body, registration_ids); end
  def build_not_registered_ids(body, registration_id); end
  def build_post_body(registration_ids, options = nil); end
  def build_response(response, registration_ids = nil); end
  def create(key_name, project_id, registration_ids = nil); end
  def create_notification_key(key_name, project_id, registration_ids = nil); end
  def execute_notification(body); end
  def for_uri(uri); end
  def has_canonical_id?(result); end
  def initialize(api_key, client_options = nil); end
  def is_not_registered?(result); end
  def manage_topics_relationship(topic, registration_ids, action); end
  def recover_notification_key(key_name, project_id); end
  def remove(key_name, project_id, notification_key, registration_ids); end
  def remove_registration_ids(key_name, project_id, notification_key, registration_ids); end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def send(registration_ids, options = nil); end
  def send_notification(registration_ids, options = nil); end
  def send_to_topic(topic, options = nil); end
  def send_to_topic_condition(condition, options = nil); end
  def send_with_notification_key(notification_key, options = nil); end
  def timeout; end
  def timeout=(arg0); end
  def topic_subscription(topic, registration_id); end
  def validate_condition?(condition); end
  def validate_condition_format?(condition); end
  def validate_condition_topics?(condition); end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
